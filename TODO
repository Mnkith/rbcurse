#  NCURSES APPLICATION GENERATOR #
#
#  2008-10-27 19:12 
#   - dynamic creation of fields, however, for this fields will have to be created before form
     kicks in, and will have to supplant fields created. Unless we have some program that
     allows us to do so - it does not create fields - DONE
   - FIELD, allow dynamic setting of field readonly set_field_readonly
   - move generic stuff fmr contractedit to a generic database app < editapplication

   - creating a field is awfully verbos and pathetic. let's make it easy.

#   - how can calling program change the label of Send to Save. or Update Delete DONE
#     Use bind_key to pass method or proc
   - How can calling program, insert keys in middle, pushing others to right - DONE
   - caller to make a field/key readonly
   - specify that only update to happen, or update or delete. which actions to allow
   - actions to go into rbedit or a derivative of rbedit that has update/delete/insert/select

   - application labels should be a class currently the functionality is diffuse. can modify
     easily. sheesh !
   
   
#  2008-10-26 16:47 
#  Need to work on transv.rb and allow passing of code to query and populated.
#  Also work on save.
#
#  I need to worry less on DSL and work more on how apps can be made simpler and more hackable.
#   with appropriate hooks.
#
#  2008-10-26 10:34 
   How to simplify the awful header/footer_win business. If i pass the win's themselves as i had
   started doing, then progs can execute in their own space and use the win.
#
# 2008-10-25 15:46 
  I am now working again on query, trying to simplify it. The qapp and table app.
  Should pass in handlers to form_init to init the db.
  form_pop to pop, etc.
  Then we can try addnig handlers for deletion. and call and edit form from here.

# 2008-10-24 14:54 
  How about using Rdoc/Template, looks cleaner than our thingie.
# 2008-10-24 10:50 
  Some confusion between post_proc and on_exit_handler.
#
#  2008-10-23 11:39 
  This thing of a datasource that is passed, as well as checking main for procedures
  to execute is complicated and  too much coupling that can go bad.
  Allow main or datasource or whatever to set its handler procs. Then we don't have to worry at all about such hardcoded callbacks.
  That will make future stuff easier to implement. Too much changing for each type of form!

# 2008-10-22 12:27 
  clear the confusion in default and helptext in the dsl. it should be
  default string 
  or 
  default { proc }

  This makes it clear to the user and us what to do.
  **NOTE** : *shit* - can't do that. Cos it gtes evaluated while passing. Using method, lamdba etc
       is tricky in the DSL. 
#  2008-10-18 23:41 
   key binding allow action. ALso add a proc there. Call proc on key. Application.rb

   Pass self to handlers (i.e. form. currently it is complicated with curritem and listselected
   being passed which is not relevant to non-tables).

# 2008-09-25 16:41  

   Map each fhash setting to a method, so its modular and maintainable. Should not get
   more monolithic and dirty as we go.

###################
## MAJOR ENTRIES ##
###################

### SQLITE INTEGRATION ###

    * done in mrows
    * TODO in single edit

### mysql integration ###

    this could help me abstract the database portion

### MENU PAGE ###
 
   * select a row and press enter, then some proc or form is called.
     This is a main menu kind of thing like Pine's first page.

### MULTI-ROW DISPLAY / LIST ###

   * read in many rows from somewhere (filelist etc) and display. User can go up and down
     and select one. Some function is called on Enter and other keys.
     One function could open the list on another page for editing.

   * Done, but we need to integrate with a VIEW / EDIT screen.

---

### LINES BOXES SPACES ###

* 2008-09-22 16:58 *
  
  stfl seems to do a great job in layouting. In our case, the fields are given to form manager to
  paint. Also, we don't process as we read. It goes into array and hashes and the fields are then unrolled and painted.
 So how do we handle if a user specifies a line, or space between some set of fields. Other than
giving hard coded coords which is one way. Otherwise, when we generate, we have no way of knowing the order etc. And we don't paint the fields, the form manager does all that.

---

### TO-DO LIST (FIRST)  ###

* 2008-09-16 20:29 *

0. Take care of inputting default values if user omits so he can keep input as little as possible
   Avoid errors totally. - DONE
1. Do other functions like:
    helptext - DONE
    default  - DONE
    error-message - NOT REQUIRED YET with help, but print_status is there

2. allow other keys to be defined, add some more immediately to make it more helpful
Save, etc. Display keys at bottom.

3. Read up from file and write to file
 Later read from sqlite and write back.

4. read only fields that can be set based on other fields like total, or time.

   Display date on top,  - DONE
   maybe running time.

5. postprocessing of fields, - field_term_hook
if valid or validate, call that. valid regexp check against that
place value in a hash so user can access that.

   valid is now checked ( 2008-09-19 16:15 ) but it is better to use REGEXP since I cannot
  put cursor back to field.
  Updating a hash named current whenever field modified. Hopefull can be used by user.

Save - check if all required fields filled
       keep a list of required fields, maybe warn if empty fields
       or one global warn if empty field
   function handles per field - DONE use post_proc

6. a multi-line text box  - DONE. Needs specific key checks to make it usable. Also when saving,
   need to replace spaces with newline after splitting it. DONE.

7. multi-row input wiht selection, maybe add and delete or select and do something

8. menu like screen

9. menu - make example and wrap

* allow handling of command line params ?

* file picking by tab completion ? or key ?
